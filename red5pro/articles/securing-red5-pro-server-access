Thank you for this. Our security team would prefer disabling any services we do not use at the server instance itself (aka server hardening). Since we do not currently plan to use the Red5 Pro website in production, we are looking for a way to disable/stop/unbind the website hosting service altogether.

If it helps, we are using the following services:

TCP 443, REST APITCP 1935, RTMPTCP 8554, RTSP

We would also like to enable RTMPS on 443 but will open another case for that as we have been unable to do so.

AND

Missed one 

TCP 443, WebRTCUDP 40000-65535, WebRTC

======================================================================================================================


Red5 Pro consists of tomcat which does all the standard webserver activities and media server codebase handles streaming. So they are not disjoint in any ways. So to say - `disable/stop/unbind the website hosting service altogether.` is not quite feasible. there are howeveer a few things you do to secure the server to a certain level of satisfaction that ensures that service wont be misutilized.


1. Protect the core media server services using simple auth plugin (https://github.com/red5pro/red5pro-simple-auth-plugin). This will ensure that only clients that are supposed to be able to use the services can use them. You will be passing in a token along with username password, that can be validated at a remote server over HTTPS. This will assure a validation of clients connecting over 1935 and 8554. UDP 40000-65535 are not used directly so if at all you need to prevent udp flooding you have to use linux side solutions. the webrtc plugin uses ports randomly in this range. so you cannot lock/unlock a subset of them.

Also see: https://www.red5pro.com/docs/plugins/authplugin/overview/ and https://www.red5pro.com/docs/plugins/round-trip-auth/enabling-security/


2. For HTTP services offered over 443, the security approach is not Red5 Pro centric but general java JEE server centric. Following are some of the common strategies for securing a Java JEE server that are also applicable to Red5 Pro.


A. Publically accessible endpoints : Remove the webapps that you dont need. This will reduce the possible urls that can be reached on the server publically. Depending on whether you are using autoscaling or a standalone setup,  you can get rid of the unnecessary webapps (see red5 pro documentation https://www.red5pro.com/docs/server/installation/optimizing/). For the root webapp and the webapp that you are using (that cannot be removed), delete unnecessary JSP files. They are just there to render web pages. If you have your own HTML application deployed elsewhere, you wont need these JSP files. The best part is tomcat does not enable directory browsing by default. So if you delete the jsp files, there isnt much one can see visiting your server url other than tomcat 404 messages.


B. API Authentication : All APIs in Red5 Pro (StreamManager API and Red5 Pro server API) implement some sort of basic security, which is usually good enough for normal usage. But you can still extend it by creating your own authentication scheme/mechanism in java and adding to the webapp through the WEB-INF/web.xml of the webapp as a security filter, such that every visit to the API path will trigger your custom authentication code.  Using a custom logic you can implement any kind of security requirement easily. To get a better idea of using servlet filters for security please see: https://www.javatpoint.com/authentication-filter.


C. CORS Vunerability : Cross-origin resource sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of a given domain. By default browsers follow same origin policy, thereby  limiting the ability for a website to interact with resources outside of the source domain. The CORS policy is flexible and can be extended through proper use of browser headers which also makes it a security vunerability. 

When you are developing on Red5 Pro, sometimes you might need to develop client applications on your desktop machine while Red5 Pro runs on a remote server. In these cases you might sometimes need to access Red5 Pro APIs (Stream Manager API and Red5 Pro API) and thats when you will notice that API calls from your custom program are blocked. This is because of the cross origin policy. This can also happen when you have a application server on a different domain making API calls to a Red5 Pro instance that is running on a different domain.

On Red5 Pro CORS settings can be edited in the webapp's web.xml file, which is located at webapps/{webappname}/WEB-INF/web.xml. Not only can you add domians and ports but can also control what HTTP methods are allowed. Incorrect CORS settings can therefore expose your APIs to anyone. For instructiosn on managing CORS settings please check out the links referenced below.

* Stream Manager CORS settings : https://www.red5pro.com/docs/autoscale/stream-manager-cors/solution/
* Generic Webapp CORS settings : https://red5pro.zendesk.com/hc/en-us/articles/115000260768-Enabling-Cross-Origin-Resource-Sharing-CORS 


D. HTTP basic authentication for Webserver security : One of the simplest techniques used to prevent HTTP/HTTPS access to a web server can is the implementation of HTTP basic authentication (https://en.wikipedia.org/wiki/Basic_access_authentication). 

However if you are using using WebRTC you should not enable it for the webapp that you are using for WebRTC streaming. you can howevere use it to add double protection to the API when it is a separate webapp than the streaming webapp.For more informatrion on basic authentication,see https://red5pro.zendesk.com/hc/en-us/articles/217073838-How-to-Password-Protect-Red5-Pro-Apps-Using-Simple-HTTP-Basic-Realm-Authentication

+ If you wish to experiment with URL rewriting for Red5 Pro URLs, you should use tuckey's URLRewrite filter : https://tuckey.org/urlrewrite/









